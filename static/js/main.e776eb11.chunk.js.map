{"version":3,"sources":["App.module.css","components/Counter/Conter.module.css","components/Counter/Number/Number.module.css","components/Counter/Button/Button.module.css","components/Counter/InputName/InputName.module.css","components/Counter/NameList/NameList.module.css","components/Counter/Number/Number.js","components/Counter/Button/Button.js","components/Counter/InputName/InputName.js","components/Counter/NameList/NameList.js","components/Counter/Counter.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Number","render","className","css","num","props","state","count","React","Component","Button","btn","onClick","clickFunc","InputName","input","type","placeholder","ref","addNameRef","NameList","names","namesArr","Counter","counter","App","name","onClickFunc","newTitle","current","value","newName","copyNames","isNaN","setState","alert","createRef","this","map","elem","index","key","app","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0FACAA,EAAOC,QAAU,CAAC,IAAM,mB,gBCAxBD,EAAOC,QAAU,CAAC,QAAU,0B,gBCA5BD,EAAOC,QAAU,CAAC,IAAM,sB,gBCAxBD,EAAOC,QAAU,CAAC,IAAM,sB,gBCAxBD,EAAOC,QAAU,CAAC,MAAQ,2B,gBCA1BD,EAAOC,QAAU,CAAC,MAAQ,0B,4NCaXC,E,4MATbC,OAAS,WACP,OACE,yBAAKC,UAAWC,IAAIC,KAClB,8BAAO,EAAKC,MAAMC,MAAMC,S,YALXC,IAAMC,W,iBCUZC,E,4MATbT,OAAS,WACP,OACE,yBAAKC,UAAWC,IAAIQ,KAClB,4BAAQC,QAAS,EAAKP,MAAMQ,WAA5B,S,YAJaL,IAAMC,W,iBCWZK,E,4MATXb,OAAS,WACT,OACE,yBAAKC,UAAWC,IAAIY,OAClB,2BAAOC,KAAK,OAAQC,YAAY,aAAaC,IAAK,EAAKb,MAAMc,e,YAL7CX,IAAMC,W,iBCYfW,E,4MAVbnB,OAAS,WACP,OACE,yBAAKC,UAAWC,IAAIkB,OAClB,sCACA,6BAAM,EAAKhB,MAAMiB,Y,YANFd,IAAMC,WCkBdc,E,4MAZbtB,OAAS,WACP,OACE,yBAAKC,UAAWC,IAAIqB,SAClB,kBAAC,EAAD,CAAQlB,MAAO,EAAKD,MAAMC,QAC1B,kBAAC,EAAD,CAAWa,WAAY,EAAKd,MAAMc,aAClC,kBAAC,EAAD,CAAQb,MAAO,EAAKD,MAAMC,MAAOO,UAAW,EAAKR,MAAMQ,YACvD,kBAAC,EAAD,CAAUP,MAAO,EAAKD,MAAMC,MAAOgB,SAAU,EAAKjB,MAAMiB,a,YAR1Cd,IAAMC,WC2CbgB,E,kDA5Cb,WAAYpB,GAAQ,IAAD,8BACjB,cAAMA,IAIRC,MAAQ,CACNC,MAAO,EACPc,MAAO,CACL,CAACK,KAAM,QARQ,EAYnBC,YAAc,WAEZ,IAAIC,EAAW,EAAKT,WAAWU,QAAQC,MACnCC,EAAU,CAACL,KAAME,GACjBI,EAAS,sBAAO,EAAK1B,MAAMe,OAAlB,CAAyBU,IACrB,KAAbH,GAAoBK,MAAML,EAAS,KACrC,EAAKM,SAAS,CAACb,MAAOW,IACtB,EAAKE,SAAS,CAAC3B,MAAO,EAAKD,MAAMC,MAAQ,IACzC,EAAKY,WAAWU,QAAQC,MAAQ,IAEhCK,MAAM,yDApBR,EAAKhB,WAAaX,IAAM4B,YAFP,E,qDA2BjB,IAAId,EAAWe,KAAK/B,MAAMe,MAAMiB,KAAI,SAACC,EAAMC,GACzC,GAAIA,EAAQ,EACV,OAAO,yBAAKC,IAAKD,GAAV,cAAsBA,EAAtB,cAAiCD,EAAKb,MAAtC,SAGX,OACE,yBAAKxB,UAAWC,IAAIuC,KAClB,kBAAC,EAAD,CACEpC,MAAO+B,KAAK/B,MACZO,UAAWwB,KAAKV,YAChBR,WAAYkB,KAAKlB,WACjBG,SAAUA,S,GAxCFd,IAAMC,WCQJkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAAS/C,OACP,kBAAC,IAAMgD,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e776eb11.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__3HT3n\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter\":\"Conter_counter__1eNvj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"num\":\"Number_num__1EXtE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Button_btn__2PEo6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"InputName_input__2HAQ2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"names\":\"NameList_names__3swUE\"};","import React from 'react';\nimport  css from './Number.module.css'\n\nclass Number extends React.Component {\n\n  render = () => {\n    return (\n      <div className={css.num}>\n        <span>{this.props.state.count}</span>\n      </div>\n    );\n  }\n}\n\nexport default Number;\n","import React from 'react';\nimport css from './Button.module.css'\n\nclass Button extends React.Component {\n  render = () => {\n    return (\n      <div className={css.btn}>\n        <button onClick={this.props.clickFunc}>Add</button>\n      </div>\n    );\n  }\n}\n\nexport default Button;\n","import React from 'react';\nimport css from './InputName.module.css';\n\nclass InputName extends React.Component {\n\n    render = () => {\n    return (\n      <div className={css.input}>\n        <input type=\"text\"  placeholder=\"Write name\" ref={this.props.addNameRef} />\n      </div>\n    );\n  }\n}\n\nexport default InputName;\n\n","import React from 'react';\nimport css from './NameList.module.css'\n\nclass NameList extends React.Component {\n\n  render = () => {\n    return (\n      <div className={css.names}>\n        <div>Names</div>\n        <div>{this.props.namesArr}</div>\n      </div>\n    );\n  }\n}\n\nexport default NameList;\n","import React from 'react';\nimport css from './Conter.module.css';\nimport Number from \"./Number/Number\";\nimport Button from \"./Button/Button\";\nimport InputName from \"./InputName/InputName\";\nimport NameList from \"./NameList/NameList\";\n\nclass Counter extends React.Component {\n\n  render = () => {\n    return (\n      <div className={css.counter}>\n        <Number state={this.props.state} />\n        <InputName addNameRef={this.props.addNameRef}/>\n        <Button state={this.props.state} clickFunc={this.props.clickFunc} />\n        <NameList state={this.props.state} namesArr={this.props.namesArr}/>\n      </div>\n    );\n  }\n}\n\nexport default Counter;\n","import React from 'react';\nimport css from './App.module.css';\nimport Counter from \"./components/Counter/Counter\";\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.addNameRef = React.createRef();\n  }\n\n  state = {\n    count: 0,\n    names: [\n      {name: null}\n    ]\n  };\n\n  onClickFunc = () => {\n    // debugger;\n    let newTitle = this.addNameRef.current.value;\n    let newName = {name: newTitle};\n    let copyNames = [...this.state.names, newName];\n    if (newTitle !== ''  && isNaN(newTitle[0])) {\n      this.setState({names: copyNames});\n      this.setState({count: this.state.count + 1});\n      this.addNameRef.current.value = '';\n    } else {\n      alert(\"Write name!!! The first character cannot be a number\");\n    }\n  };\n\n  render() {\n    let namesArr = this.state.names.map((elem, index) => {\n      if (index > 0) {\n        return <div key={index}> {`${index}.  ${elem.name}`}  </div>\n      }\n    });\n    return (\n      <div className={css.app}>\n        <Counter\n          state={this.state}\n          clickFunc={this.onClickFunc}\n          addNameRef={this.addNameRef}\n          namesArr={namesArr}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. Counter is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}